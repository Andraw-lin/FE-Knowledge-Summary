(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{293:function(a,t,s){"use strict";s.r(t);var n=s(0),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"ajax缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ajax缓存"}},[a._v("#")]),a._v(" AJAX缓存")]),a._v(" "),s("p",[a._v("Ajax在发送的数据成功后，会把请求的URL和返回的响应结果保存在缓存内，当下一次调用Ajax发送相同的请求时，它会直接从缓存中把数据取出来，这是为了提高页面的响应速度和用户体验。当前这要求两次请求URL完全相同，包括参数。这个时候，浏览器就不会与服务器交互")]),a._v(" "),s("h2",{attrs:{id:"ajax缓存的优点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ajax缓存的优点"}},[a._v("#")]),a._v(" Ajax缓存的优点")]),a._v(" "),s("p",[a._v("使客户端对一些静态页面内容的请求，比如图片，CSS文件，JS脚本等，变得更加快捷，提高了页面的响应速度，也节省了网络通信资源")]),a._v(" "),s("h2",{attrs:{id:"ajax缓存的缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ajax缓存的缺点"}},[a._v("#")]),a._v(" Ajax缓存的缺点")]),a._v(" "),s("p",[a._v("如果通过Ajax对一些后台数据进行更改的时候，虽然数据在后台已经发生改变，但是页面缓存中并没有改变，对于相同的URL，Ajax提交过去以后，浏览器还只是简单的从缓存中拿数据")]),a._v(" "),s("h2",{attrs:{id:"解决ajax缓存方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解决ajax缓存方法"}},[a._v("#")]),a._v(" 解决Ajax缓存方法")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("在Ajax发送请求前加上:")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("   anyAjaxObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("setRequestHeader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"If-Modified-Since"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"0"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])])]),a._v(" "),s("li",[s("p",[a._v("在Ajax发送请求前加上:")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("   anyAjaxObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("setRequestHeader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Cache-Control"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"no-cache"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])])]),a._v(" "),s("li",[s("p",[a._v("在Ajax的 URL 参数后加上:")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("   "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"?fresh="')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" Math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("random")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \n")])])])]),a._v(" "),s("li",[s("p",[a._v("在 URL 参数后加上:")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("   "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"?timestamp="')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getTime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])])]),a._v(" "),s("li",[s("p",[a._v("如果是使用jQuery，就使用")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("   $"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ajaxSetup")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("cache"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v("这样页面的所有ajax都会执行这条语句就是不需要保存缓存记录;")])]),a._v(" "),s("li",[s("p",[a._v("用POST替代GET")])])]),a._v(" "),s("h2",{attrs:{id:"ajax的post与get的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ajax的post与get的区别"}},[a._v("#")]),a._v(" Ajax的Post与Get的区别")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("Post:")]),a._v(" "),s("p",[a._v("使用POST方式时，浏览器把各表单字段元素及其数据作为HTTP消息的实体内容发送给Web服务器，而不是作为URL地址的参数进行传递，使用POST方式传递的数据量要比使用GET方式传送的数据量大的多;")])]),a._v(" "),s("li",[s("p",[a._v("Get:")]),a._v(" "),s("p",[a._v("用get方式可传送简单数据，但大小一般限制在1KB下，数据追加到url中发送（http的header传送），也就是说，浏览器将各个表单字段元素及其数据按照URL参数的格式附加在请求行中的资源路径后面。另外最重要的一点是，它会被客户端的浏览器缓存起来，那么，别人就可以从浏览器的历史记录中，读取到此客户的数据，比如帐号和密码等。因此，在某些情况下，get方法会带来严重的安全性问题")]),a._v(" "),s("p",[a._v("GET方式传送数据量小，处理效率高，安全性低，会被缓存，而POST反之")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);