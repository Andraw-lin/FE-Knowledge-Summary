(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{241:function(t,e,a){"use strict";a.r(e);var s=a(0),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"about-react-render-and-update-个人见解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#about-react-render-and-update-个人见解"}},[t._v("#")]),t._v(" About React Render And Update(个人见解)")]),t._v(" "),a("p",[a("code",[t._v("React")]),t._v("主打函数式思想，设计理念就是"),a("code",[t._v("all in js")]),t._v("，另外推崇的是数据不可变性，所有的数据更新都需手动去操作，便于提高应用的可控性。")]),t._v(" "),a("p",[t._v("本文就是以"),a("code",[t._v("React")]),t._v("为主体，简单滴谈一谈个人对于"),a("code",[t._v("React")]),t._v("在渲染层面以及更新层面的一些见解，当中难免会出现一些错误的观点，还请各位童鞋大大们多多指点一下哈 🙈。")]),t._v(" "),a("h2",{attrs:{id:"目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),a("ol",[a("li",[a("p",[a("a",{attrs:{href:"#1"}},[t._v("Render（渲染）")])]),t._v(" "),a("p",[t._v("1.1 "),a("a",{attrs:{href:"#11"}},[t._v("第一次渲染情况")])]),t._v(" "),a("p",[t._v("1.2 "),a("a",{attrs:{href:"#12"}},[t._v("后续渲染情况")])])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"#2"}},[t._v("Update（更新之调度任务）")])])])]),t._v(" "),a("h2",{attrs:{id:"render（渲染）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#render（渲染）"}},[t._v("#")]),t._v(" Render（渲染）")]),t._v(" "),a("p",[t._v("在分析"),a("code",[t._v("Render")]),t._v("前，我先引一段代码。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" React "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" ReactDOM "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react-dom'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("App")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("React"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("component")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nReactDOM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("App "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#root'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("相信大家对于上述这坨代码尤为熟悉，不管编写的"),a("code",[t._v("App")]),t._v("组件有多复杂，终究都会通过"),a("code",[t._v("React.render")]),t._v("方法来挂载到相应的"),a("code",[t._v("DOM")]),t._v("元素下。")]),t._v(" "),a("p",[t._v("那么问题来了，在"),a("code",[t._v("ReactDOM.render")]),t._v("方法中究竟发生了什么事情？")]),t._v(" "),a("p",[t._v("在这里，我会说明一下，"),a("code",[t._v("Render")]),t._v("过程中会分为两种情况，分别是：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("第一次渲染情况，从"),a("code",[t._v("root")]),t._v("开始，先创建一个"),a("code",[t._v("Virtual DOM")]),t._v("，再直接渲染出一个真实"),a("code",[t._v("DOM")])]),t._v("。")]),t._v(" "),a("li",[a("strong",[t._v("后续渲染情况，先创建一个新"),a("code",[t._v("Virtual DOM")]),t._v("，与旧"),a("code",[t._v("Virtual DOM")]),t._v("进行"),a("code",[t._v("diff")]),t._v("，再批量滴渲染到真实"),a("code",[t._v("DOM")]),t._v("中")]),t._v("。")])]),t._v(" "),a("blockquote",[a("p",[a("span",{attrs:{id:"11"}},[t._v("第一次渲染情况")])])]),t._v(" "),a("p",[t._v("先来看看第一次渲染情况中到底发生了什么事情？下面我就不对源码贴出，直接说出来（当中对于部分不理解童鞋难免会有些难以理解，后面有时间我会单独讲讲"),a("code",[t._v("React")]),t._v("源码哈～）")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("首先在调用"),a("code",[t._v("ReactDOM.render")]),t._v("时，其内部会执行一个"),a("code",[t._v("legacyRenderSubtreeIntoContainer")]),t._v("方法，该方法会判断是否已存在"),a("code",[t._v("root")]),t._v("。")])]),t._v(" "),a("li",[a("p",[t._v("当判断不存在"),a("code",[t._v("root")]),t._v("时，就会使用"),a("code",[t._v("legacyCreateRootFromDOMContainer")]),t._v("方法创建一个"),a("code",[t._v("root")]),t._v("对象，并挂载在"),a("code",[t._v("container._reactRootContainer")]),t._v("（即"),a("code",[t._v("document.querySelector('#root')._reactRootContainer")]),t._v("）中。")])]),t._v(" "),a("li",[a("p",[t._v("在方法"),a("code",[t._v("legacyCreateRootFromDOMContainer")]),t._v("中，会先将容器内部的所有节点进行移除。")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("在很多情况下，我们我像上面这样去编写根模板。接着就会"),a("strong",[t._v("使用"),a("code",[t._v("ReactRoot")]),t._v("构造函数创建"),a("code",[t._v("root")]),t._v("对象")]),t._v("。（即**"),a("code",[t._v("root")]),t._v("对象 --\x3e "),a("code",[t._v("new ReactRoot()")]),t._v("**）。")])]),t._v(" "),a("li",[a("p",[t._v("在构造函数"),a("code",[t._v("ReactRoot")]),t._v("中，会使用"),a("code",[t._v("createContainer")]),t._v("方法创建一个"),a("code",[t._v("FiberRoot")]),t._v("对象，并挂载在"),a("code",[t._v("root")]),t._v("对象的"),a("code",[t._v("_internalRoot")]),t._v("属性中，其中"),a("code",[t._v("createContainer")]),t._v("方法使用的是"),a("code",[t._v("createFiberRoot")]),t._v("方法创建。")]),t._v(" "),a("p",[t._v("需要说明的是，"),a("strong",[a("code",[t._v("fiber")]),t._v("是一个树结构，和"),a("code",[t._v("DOM")]),t._v("树中节点一一对应，即每一个"),a("code",[t._v("DOM")]),t._v("节点都会对应一个"),a("code",[t._v("fiber")]),t._v("对象，而"),a("code",[t._v("FiberRoot")]),t._v("对象对应根节点"),a("code",[t._v("Root")])]),t._v("。")])]),t._v(" "),a("li",[a("p",[t._v("在"),a("code",[t._v("createFiberRoot")]),t._v("方法中，使用"),a("code",[t._v("FiberRootNode")]),t._v("构造函数创建"),a("code",[t._v("FiberRoot")]),t._v("对象，然后使用"),a("code",[t._v("createHostRootFiber")]),t._v("方法创建一个"),a("code",[t._v("RootFiber")]),t._v("对象，并挂载到"),a("code",[t._v("FiberRoot")]),t._v("对象的"),a("code",[t._v("current")]),t._v("属性中（"),a("strong",[t._v("即"),a("code",[t._v("FiberRoot.current === RootFiber")])]),t._v("）。")])]),t._v(" "),a("li",[a("p",[t._v("对于"),a("code",[t._v("FiberRoot")]),t._v("对象，只需理解其两个属性，分别是"),a("code",[t._v("containerInfo")]),t._v("和"),a("code",[t._v("current")]),t._v("属性。其中前者代表是"),a("code",[t._v("document.querySelector('#root')")]),t._v("，后者代表的是"),a("code",[t._v("RootFiber")]),t._v("。")])]),t._v(" "),a("li",[a("p",[t._v("对于"),a("code",[t._v("RootFiber")]),t._v("对象，我们先来看看要理解的属性。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  stateNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Fiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  child"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Fiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  sibling"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Fiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  effectTag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" SideEffectTag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  alternate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Fiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("stateNode：指向"),a("code",[t._v("FiberRoot")]),t._v("对象。")]),t._v(" "),a("li",[t._v("return：指向当前节点的父节点。")]),t._v(" "),a("li",[t._v("child：指向当前节点的子节点。")]),t._v(" "),a("li",[t._v("sibling：指向当前节点的兄弟节点。")]),t._v(" "),a("li",[t._v("effectTag：指代记录"),a("code",[t._v("DOM")]),t._v("操作，如增删改。")]),t._v(" "),a("li",[t._v("alternate：指向其旧树对应的节点。需要清楚的是，"),a("strong",[t._v("存在新旧两个"),a("code",[t._v("fiber")]),t._v("树，旧树称为"),a("code",[t._v("old tree")]),t._v("，新树称为"),a("code",[t._v("workInProgress tree")]),t._v("，其中前者代表渲染好的"),a("code",[t._v("DOM")]),t._v("树，后者则代表正在执行更新的"),a("code",[t._v("fiber")]),t._v("树，当更新结束后，"),a("code",[t._v("workInProgress tree")]),t._v("将会替换"),a("code",[t._v("old tree")])]),t._v("。")])])])]),t._v(" "),a("p",[t._v("下面我们就以一张图简单看看下面这段代码在第一次渲染时，所存在的关系。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" React "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" ReactDOM "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react-dom'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("App")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  \t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("span"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("span"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nReactDOM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("App "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#root'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Andraw-lin/keep-Learning/master/asset/React%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%B8%B2%E6%9F%93%E5%85%B3%E7%B3%BB%E5%9B%BE.jpg",alt:"React第一次渲染关系图"}})]),t._v(" "),a("blockquote",[a("p",[a("span",{attrs:{id:"12"}},[t._v("后续渲染情况")])])]),t._v(" "),a("p",[t._v("接下来就要说的就是后续渲染情况，上面已经说过，当发现已经存在旧的"),a("code",[t._v("Virtual DOM")]),t._v("后（即已存在"),a("code",[t._v("root")]),t._v("对象），则会创建一个新的"),a("code",[t._v("Virtual DOM")]),t._v("，并且通过"),a("code",[t._v("diff")]),t._v("算法，批量更新到真实"),a("code",[t._v("DOM")]),t._v("中。")]),t._v(" "),a("p",[t._v("那么在后续的渲染过程中，又是如何处理的？我们接着看 🤔")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("由于已存在"),a("code",[t._v("root")]),t._v("对象（即"),a("code",[t._v("new ReactRoot()")]),t._v("），会直接调用"),a("code",[t._v("root.render(children, callback)")]),t._v("方法（即"),a("code",[t._v("ReactRoot.prototype.render")]),t._v("）。在该方法中，首先先取得"),a("code",[t._v("root._internalRoot")]),t._v("即"),a("code",[t._v("FiberRoot")]),t._v("对象，然后直接构建"),a("code",[t._v("new ReactWork()")]),t._v("（该构建对象作用是便于组件渲染或更新后把"),a("code",[t._v("render")]),t._v("中的"),a("code",[t._v("callback")]),t._v("全部调用一遍）。")])]),t._v(" "),a("li",[a("p",[t._v("接着调用"),a("code",[t._v("updateContainer")]),t._v("方法，该方法中会通过"),a("code",[t._v("FiberRoot")]),t._v("对象中的"),a("code",[t._v("current")]),t._v("属性获取到"),a("code",[t._v("fiber tree")]),t._v("（即旧树）。然后通过"),a("code",[t._v("requestCurrentTime")]),t._v("方法计算"),a("code",[t._v("currentTime")]),t._v("任务的当前时间，通过"),a("code",[t._v("computeExpirationForFiber")]),t._v("方法计算任务过期时间。")])]),t._v(" "),a("li",[a("p",[t._v("在方法"),a("code",[t._v("requestCurrentTime")]),t._v("中，通过"),a("code",[t._v("performance.now() - orginalStartTimeMs")]),t._v("得到"),a("code",[t._v("currentTime")]),t._v("当前时间，其中"),a("code",[t._v("performance.now()")]),t._v("是当前时间，"),a("code",[t._v("orginalStartTimeMs")]),t._v("则是整个"),a("code",[t._v("React")]),t._v("应用初始化时间（初始化时就创建，固定不变的常量），得到的**"),a("code",[t._v("currentTime")]),t._v("则是当前任务距离应用初始化时间的时间间隔**。")]),t._v(" "),a("p",[t._v("最后得到"),a("code",[t._v("currentTime")]),t._v(" 时间间隔进行"),a("strong",[t._v("取整处理，即(currentTime | 0)")]),t._v("。")])]),t._v(" "),a("li",[a("p",[t._v("接着计算"),a("code",[t._v("expirationTime")]),t._v("过期时间，该时间"),a("strong",[t._v("和优先级相关，值越大，优先级就越高")]),t._v("。在方法"),a("code",[t._v("computeExpiration")]),t._v("中，其实就是"),a("strong",[t._v("将当前时间"),a("code",[t._v("performance.now()")]),t._v("加上一个优先级常量得到"),a("code",[t._v("expiration")]),t._v("过期时间")]),t._v("。")]),t._v(" "),a("p",[t._v("在"),a("code",[t._v("React")]),t._v("中共分为五种优先级，分别是")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("优先级")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("优先级常量")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("ImmediatePriority（立即执行优先级）")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-1")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("UserBlockingPriority（用户交互优先级）")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("250")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("NormalPriority（正常优先级）")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("5000")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("LowPriority（低优先级）")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("10000")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("IdlePriority（空闲优先级）")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("5")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("maxSigned31BitInt(约1073741823)")])])])])]),t._v(" "),a("li",[a("p",[t._v("最后会创建一个"),a("code",[t._v("update")]),t._v("对象，该对象主要跟"),a("code",[t._v("setState")]),t._v("相关联，主要理解属性包括")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// update对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  expirationTime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" expirtationTime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这次更新的过期时间")]),t._v("\n  payload"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// setState的第一个参数")]),t._v("\n  callback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// setState的第二个参数")]),t._v("\n  next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用于寻找队列中的下一个节点")]),t._v("\n  nextEffect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用于执行队列中下一个节点的DOM相关操作")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("strong",[t._v("对于任何一个触发"),a("code",[t._v("render")]),t._v("的操作，都会创建一个"),a("code",[t._v("update")]),t._v("对象，使用队列方式进行存储，其中"),a("code",[t._v("next")]),t._v("属性就是用于查找下一个"),a("code",[t._v("update")]),t._v("节点")]),t._v("。")]),t._v(" "),a("p",[t._v("对于批量更新的过程中，由于创建多个"),a("code",[t._v("update")]),t._v("对象，在等到浏览器客户端空闲时，就会按优先级大小进行批量更新，但是也需要重点结合"),a("code",[t._v("expirationTime")]),t._v("过期时间，这个过程也是所谓的调度任务。（这也是能解释为什么多次调用"),a("code",[t._v("setState")]),t._v("，最后都只是更新一次～🤔）")])])]),t._v(" "),a("h2",{attrs:{id:"update（更新之调度任务）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update（更新之调度任务）"}},[t._v("#")]),t._v(" Update（更新之调度任务）")]),t._v(" "),a("p",[t._v("先抛一个问题，当我们"),a("code",[t._v("setState")]),t._v("时，在后续取到的值依然是旧的值？相信大家都清楚，在"),a("code",[t._v("React")]),t._v("中会通过调度任务进行分配，那么"),a("code",[t._v("setState")]),t._v("由于后续需要批量更新，优先级不高，所以都会延后处理，这就导致为什么"),a("code",[t._v("setState")]),t._v("后取到的值依然是旧的值。")]),t._v(" "),a("p",[t._v("那么问题来了，调度的作用是什么？")]),t._v(" "),a("p",[t._v("我们知道，当点击一个按钮时，若"),a("code",[t._v("setState")]),t._v("更新状态，就会触发组件进行渲染，由于"),a("code",[t._v("js")]),t._v("是单线程的，若此时还要等待组件渲染结束后再去做一些关键"),a("code",[t._v("js")]),t._v("逻辑处理，只会让用户感觉到卡顿的感觉，为此，调度的作用就是来处理这些事情的。")]),t._v(" "),a("p",[t._v("调度的作用就是，"),a("strong",[a("code",[t._v("react")]),t._v("会根据任务的优先级计算出各自的"),a("code",[t._v("expirationTime")]),t._v("过期时间，然后根据过期时间逐个放入到一个队列中进行管理，当浏览器空闲时，就会先处理优先级高的任务，并且优先级高的任务可以中断优先级低的任务")]),t._v("。")]),t._v(" "),a("p",[t._v("那么剩下一个问题，它是如何实现的呢？")]),t._v(" "),a("p",[t._v("答案就是"),a("strong",[t._v("根据任务优先级计算过期时间")]),t._v("和"),a("strong",[t._v("通过"),a("code",[t._v("requestIdleCallback")]),t._v("方法")]),t._v("。")]),t._v(" "),a("p",[t._v("对于计算过期时间，在上面已经提及，现在就不再论述。")]),t._v(" "),a("p",[t._v("现在就来看看"),a("code",[t._v("requestIdleCallback")]),t._v("方法，到底该方法做了哪些事情。")]),t._v(" "),a("p",[t._v("该方法其实就是在浏览器空闲时期依次调用事件队列中的任务，内部实现采用的是宏任务"),a("code",[t._v("requestAnimationFrame")]),t._v("事件以及"),a("code",[t._v("setTimeout")]),t._v("定时器来实现的。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("rAFID "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("requestAnimationFrame")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("timestamp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("localClearTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rAFTimeoutID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("timestamp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nrAFTimeoutID "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("localCancelAnimationFrame")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rAFID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCurrentTime")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("可以看到的是，当不支持"),a("code",[t._v("requestAnimationFrame")]),t._v("时，就会使用"),a("code",[t._v("setTimeout")]),t._v("进行补救～")]),t._v(" "),a("p",[t._v("现在我们就来总结一下，调度任务的过程：")]),t._v(" "),a("ol",[a("li",[t._v("当有更新任务发生时，调度器会先根据策略分配其一个优先级，比如动画的优先级会高于更新状态优先级。")]),t._v(" "),a("li",[t._v("接着根据分配好的优先级计算出过期时间（即当前时间 + 优先级），优先级越高那么时间就越近。")]),t._v(" "),a("li",[t._v("计算好过期时间后就会存储到一个任务队列中。")]),t._v(" "),a("li",[t._v("等待到浏览器空闲时，即主线程的代码都执行完后，接着调用"),a("code",[t._v("requestIdleCallback")]),t._v("方法来执行任务队列中方法，先判断任务过期时间是否过期，若过期则会立即优先执行该任务，若无则会按照优先级大小执行。")])]),t._v(" "),a("p",[t._v("需要特别说明的是，在"),a("code",[t._v("React 15")]),t._v("版本之前，当组件更新时，就需要递归向下遍历整个虚拟"),a("code",[t._v("DOM")]),t._v("判断需要更新的地方，这种处理存在的弊端在于无法中断，必须更新完所有组件才会停止。因此在更新耗时长的过程中将会阻塞主线程，从而导致用户的交互、动画等不能及时响应。")]),t._v(" "),a("p",[t._v("在"),a("code",[t._v("React 16")]),t._v("版本后，采用新的"),a("code",[t._v("Fiber")]),t._v("架构（即虚拟"),a("code",[t._v("DOM")]),t._v("升级版），将整个更新任务拆分成一个个小的任务，并且控制这些任务的执行。简单来说，"),a("strong",[a("code",[t._v("Fiber")]),t._v("架构实现的就是，任务都是按照优先级高低执行，优先级高的任务可以中断优先级低任务")]),t._v("。其"),a("strong",[t._v("核心包括"),a("code",[t._v("fiber")]),t._v("数据结构和调度器")]),t._v("。")]),t._v(" "),a("p",[t._v("在"),a("code",[t._v("diff")]),t._v("流程上，和"),a("code",[t._v("Vue")]),t._v("实现是差不多的，有兴趣的童鞋，可以看看我这篇文章"),a("a",{attrs:{href:"https://github.com/Andraw-lin/about-Vue/blob/master/docs/%E3%80%90%20Vue%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%20%E3%80%91%E5%A6%82%E4%BD%95%E5%9C%A8%E6%9B%B4%E6%96%B0%20Patch%20%E4%B8%AD%E8%BF%9B%E8%A1%8C%20Diff.md",target:"_blank",rel:"noopener noreferrer"}},[t._v(" 【Vue 源码分析 】如何在更新 Patch 中进行 Diff"),a("OutboundLink")],1),t._v("。")])])}),[],!1,null,null,null);e.default=n.exports}}]);