(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{253:function(t,s,a){"use strict";a.r(s);var n=a(0),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"关于nginx-你需要知道的点点滴滴"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于nginx-你需要知道的点点滴滴"}},[t._v("#")]),t._v(" 关于Nginx-你需要知道的点点滴滴")]),t._v(" "),a("p",[t._v("相信作为一个 Web 开发者来说，对 Nginx 肯定不陌生。我们先来看看 Nginx 在官方到底是一个什么定义。")]),t._v(" "),a("blockquote",[a("p",[t._v("Nginx 是一个异步框架的 Web 服务器，也可以用作反向代理、负载平衡器和 HTTP 缓存。")])]),t._v(" "),a("p",[t._v("很容易理解，Nginx 就是一个 Web 服务器，可以很高效滴处理异步请求。")]),t._v(" "),a("h2",{attrs:{id:"目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"#%E4%BD%95%E4%B8%BA%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%EF%BC%9F%E5%8F%88%E4%BD%95%E4%B8%BA%E5%8A%A8%E6%80%81%E9%A1%B5%E9%9D%A2%EF%BC%9F"}},[a("span",[t._v("何为静态页面？又何为动态页面？")])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#Nginx%E3%80%81Apache%E5%92%8CTomcat%E5%8C%BA%E5%88%AB%3C"}},[a("span",[t._v("Nginx、Apache和Tomcat区别")])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#Nginx-%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86"}},[a("span",[t._v("Nginx-正向代理和反向代理")])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#Nginx-%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84"}},[a("span",[t._v("Nginx-基本结构")])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#Nginx-%E5%A4%84%E7%90%86%E8%B7%A8%E5%9F%9F"}},[a("span",[t._v("Nginx-处理跨域")])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#Nginx-%E8%BF%87%E6%BB%A4%E5%92%8CRewrite"}},[a("span",[t._v("Nginx-过滤和Rewrite")])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#Nginx-gzip%E5%8E%8B%E7%BC%A9"}},[a("span",[t._v("Nginx-gzip压缩")])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#Nginx-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1"}},[a("span",[t._v("Nginx-负载均衡")])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#Nginx-%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6"}},[a("span",[t._v("Nginx-缓存机制")])])])]),t._v(" "),a("h2",{attrs:{id:"何为静态页面？又何为动态页面？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#何为静态页面？又何为动态页面？"}},[t._v("#")]),t._v(" 何为静态页面？又何为动态页面？")]),t._v(" "),a("p",[t._v("下面我会直接讲解，不讲那么多废话 🙈。")]),t._v(" "),a("ul",[a("li",[t._v("静态页面：通常以 html 结尾的文件，所有数据都是直接写死到文件中，客户端加载静态页面时，无需对数据库进行操作，而是直接将文件内容呈现出来。")]),t._v(" "),a("li",[t._v("动态页面：通常以 php、jsp、asp 结尾的文件，所有数据都是存储到数据库上的，客户端请求文件时，服务端需从数据库中获取数据并动态填充到文件中，最后将一个完整的文件内容直接返回到客户端中。")])]),t._v(" "),a("p",[a("strong",[t._v("静态页面更像是我们平时写死的 html 内容，而动态页面更像是前端领域经常提到的模板引擎")]),t._v("。那么静态页面和动态页面之间又有何区别？")]),t._v(" "),a("p",[t._v("静态页面由于会将所有内容都写在 html 文件中，因此会显得比较大，并且每次更改内容时都必须生成新的文件。而动态页面刚好相反，由于数据都是动态添加的，所以会显得比较小，但是数据获取内部却需要发出请求，因此访问速度会比静态页面慢。")]),t._v(" "),a("p",[t._v("接着我们再来看看在服务器中，客户端访问静态页面或动态页面流程是怎样的 🤔。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("服务器中访问静态页面流程")]),t._v(" "),a("p",[t._v("客户端访问一个网站时，先经过 DNS 解析得到相应的 IP 地址，接着 HTTP 协议或 HTTPS 协议将客户端请求传到服务端，服务端收到请求后就把网站目录下的 index.html 返回到客户端。")])]),t._v(" "),a("li",[a("p",[t._v("服务器中访问动态页面流程")]),t._v(" "),a("p",[t._v("相比访问静态页面，访问动态页面则是多了客户端发送请求和服务端处理数据工作。")]),t._v(" "),a("p",[t._v("客户端访问一个网站时，先经过 DNS 解析得到相应的 IP 地址，接着 HTTP 协议或 HTTPS 协议将客户端请求传到服务端，服务端收到请求找到网站目录下的 index.php 文件，并把该文件传到 php 服务器中，php 服务器利用脚解析成功后再把内容返回到客户端。")]),t._v(" "),a("p",[t._v("在 php 解析过程中，可能会存在访问数据库获取相应数据，并把数据动态放到内容中。")])])]),t._v(" "),a("p",[t._v("其实还有一种类型是"),a("strong",[t._v("伪静态页面，原理就是通过将动态页面的URL地址重写，改写成以html、htm等结尾的静态URL地址")]),t._v("。实际上还是一个动态页面的 Rewrite 过程，对服务端的消耗会增大。")]),t._v(" "),a("h2",{attrs:{id:"nginx、apache和tomcat区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx、apache和tomcat区别"}},[t._v("#")]),t._v(" Nginx、Apache和Tomcat区别")]),t._v(" "),a("p",[t._v("相信童鞋们对于 Apache 和 Tomcat 服务器都不陌生，那么它们三者又有何区别？")]),t._v(" "),a("ul",[a("li",[t._v("Nginx：web 服务器。采取"),a("strong",[t._v("异步非阻塞")]),t._v("方式，多个连接对应一个进程，在高并发情况下能处理更多的连接请求而不占太多的资源。"),a("strong",[t._v("静态页面处理能力较强")]),t._v("，尤其是反向代理服务表现突出，常被用作负载均衡和代理服务器使用。")]),t._v(" "),a("li",[t._v("Apache：web 服务器。采取"),a("strong",[t._v("同步阻塞")]),t._v("方式，一个连接对应一个进程，极大限制了处理多个请求性能。"),a("strong",[t._v("支持的模块众多，性能稳定，本身只支持静态解析，但可以通过扩展脚本、模块等支持动态页面")]),t._v("。在 Rwrite 功能上比 Nginx 好很多，常用于处理动态请求。")]),t._v(" "),a("li",[t._v("Tomcat：应用服务器。用来处理 jsp 页面和运行 servlet。")])]),t._v(" "),a("p",[t._v("简单总结一下，Nginx 处理对象就是静态页面，采取异步非阻塞方式，常作为反向代理服务。Apache 本身只支持静态页面，可通过 PHP 脚本程序支持动态 PHP 页面或 Tomcat 支持 JSP 页面，由于其支持模块众多以及 Rewrite 功能强大，因此在结合第三方模块解析动态页面层面上比 Nginx 显得尤为突出。")]),t._v(" "),a("p",[t._v("总之，"),a("strong",[t._v("Nginx 适合处理静态请求和反向代理，Apache 适合处理动态请求")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"nginx-正向代理和反向代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-正向代理和反向代理"}},[t._v("#")]),t._v(" Nginx-正向代理和反向代理")]),t._v(" "),a("p",[t._v("在开发中，我们常常听到正向代理以及反向代理这两个词，我们先来看看有什么区别。")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("正向代理")]),t._v(" "),a("p",[t._v("一个位于客户端和服务端之间代理服务器，客户端向代理服务器发送一个请求并指定目标（即原始服务器 IP 地址），然后代理服务器向原始服务器转交请求并将获得的内容返回给客户端。例如我们常常使用的fanqiang。")]),t._v(" "),a("p",[a("strong",[t._v("正向代理服务的目标是客户端（即对客户端是透明的），客户端可向代理服务器访问到客户端本身无法访问到的服务器资源。正向代理服务器对于服务端不是透明的，服务器并不知道请求方是代理服务器还是客户端")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Andraw-lin/keep-Learning/master/asset/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86.jpg",alt:"正向代理"}})])]),t._v(" "),a("li",[a("p",[t._v("反向代理")]),t._v(" "),a("p",[t._v("服务器使用一个代理服务器处理客户端请求，代理服务器可将请求转发到内部网络上的服务器，并将服务器的返回结果直接返回给客户端。")]),t._v(" "),a("p",[a("strong",[t._v("反向代理服务的目标是服务器（即对服务端是透明的），对客户端请求进行内部网络的转发，进而实现负载均衡。反向代理对于客户端不是透明的，客户端并不知道服务方是代理服务器还是原始服务器")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Andraw-lin/keep-Learning/master/asset/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86.jpg",alt:"反向代理"}})])])]),t._v(" "),a("h2",{attrs:{id:"nginx-基本结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-基本结构"}},[t._v("#")]),t._v(" Nginx-基本结构")]),t._v(" "),a("p",[t._v("在理解了正向代理和反向代理后，我们就来看看 Nginx 到底在结构上是长啥样的。下面是 Nginx 的一个基本结构")]),t._v(" "),a("div",{staticClass:"language-nginx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-nginx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("                 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 全局块")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("events")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("               "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# events块")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("http")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("                 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# http块")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# server块")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("location")]),t._v(" path "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# location块")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("location")]),t._v(" path "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("location")]),t._v(" path "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("现在就来解析一下每个字段到底是什么用处。")]),t._v(" "),a("ul",[a("li",[t._v("全局块：配置 Nginx 服务器的用户（组）、允许生成的 worker process 数、进程 PID 等。")]),t._v(" "),a("li",[t._v("events块：配置影响 Nginx 服务器与用户的网络连接。")]),t._v(" "),a("li",[t._v("http块：配置代理、缓存和日志等绝大多数的功能和第三方模块的配置。")]),t._v(" "),a("li",[t._v("server块：配置虚拟主机相关内容。")]),t._v(" "),a("li",[t._v("location块：对于请求路由进行匹配并作相应处理，还用于处理数据缓存、地址重定向等逻辑。")])]),t._v(" "),a("h2",{attrs:{id:"nginx-处理跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-处理跨域"}},[t._v("#")]),t._v(" Nginx-处理跨域")]),t._v(" "),a("p",[t._v("面试过程中，常常会被问及如何处理跨域，其中使用 Nginx 请求代理是其中的一种实现方案。")]),t._v(" "),a("p",[t._v("首先，我们先来回顾一下"),a("strong",[t._v("同源策略，即同协议、同域名、同端口")]),t._v("情况下，才可以在浏览器中正常请求并得到相应内容。")]),t._v(" "),a("p",[t._v("那么当请求不符合同源策略时，Nginx 是如何处理的呢？答案就是 "),a("strong",[t._v("proxy")]),t._v("。")]),t._v(" "),a("p",[t._v("Nginx 处理跨域的原理是，"),a("strong",[t._v("当网站地址 a.com 向 b.com 发出请求时，先启动一个 Nginx 服务器，配置相应的 server 块名为 a.com，设置 location 对需要跨域的请求进行拦截，并将请求代理到 b.com")]),t._v("。配置如下：")]),t._v(" "),a("div",{staticClass:"language-nginx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-nginx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("listen")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server_name")]),t._v("  a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("location")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("proxy_pass")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"nginx-过滤和rewrite"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-过滤和rewrite"}},[t._v("#")]),t._v(" Nginx-过滤和Rewrite")]),t._v(" "),a("p",[t._v("在前端路由中，当匹配不到路由时，一般会直接重定向到 404 页面。如果现在有一个业务逻辑，就是当后端返回的状态码为502、500状态码时，我们需要重定向到首页，可以如何做呢？")]),t._v(" "),a("p",[t._v("一般情况下，前端的做法肯定是对 http 状态码进行获取，然后匹配到为500或502时，直接手动重定向到首页。这做法可以肯定是可以的，但未免显得稍微麻烦，我们可以使用 Nginx 对状态进行匹配配置就可以很简单滴实现上述功能。配置如何")]),t._v(" "),a("div",{staticClass:"language-nginx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-nginx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("error_page")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("502")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("html"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("location")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("html "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("root")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("root")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("static"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("html"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("除此之外，Nginx 还可以对路由进行重写，如匹配不到路由时直接重定向到首页，配置如何。")]),t._v(" "),a("div",{staticClass:"language-nginx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-nginx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("location")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rewrite")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("$ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("html  redirect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"nginx-gzip压缩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-gzip压缩"}},[t._v("#")]),t._v(" Nginx-gzip压缩")]),t._v(" "),a("p",[t._v("在优化项目上，我们都清楚对于 js 文件和 css 文件进行 gzip 压缩。在所有浏览器中，并不是所有浏览器都支持 gzip 压缩，"),a("strong",[t._v("若浏览器支持 gzip，一般情况下在请求头上默认自动带上"),a("code",[t._v("Accept-Encoding")]),t._v("来标识对 gzip 压缩的支持")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-http extra-class"},[a("pre",{pre:!0,attrs:{class:"language-http"}},[a("code",[a("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Accept-Encoding:")]),t._v(" gzip, deflate\n")])])]),a("p",[t._v("启动 gzip 压缩同样需要服务端支持，当客户端支持 gzip 压缩，那么"),a("strong",[t._v("服务端只需要返回 gzip 格式文件即可启用 gzip 了，默认响应头字段为"),a("code",[t._v("Content-Encoding")])]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-http extra-class"},[a("pre",{pre:!0,attrs:{class:"language-http"}},[a("code",[a("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Content-Encoding:")]),t._v(" gzip\n")])])]),a("p",[t._v("那么，在 Nginx 中是如何配置来让服务端支持 gzip 压缩的？看看如下配置")]),t._v(" "),a("div",{staticClass:"language-nginx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-nginx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("gzip")]),t._v("                        on"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("gzip_http_version")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("gzip_comp_level")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("gzip_min_length")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("gzip_types")]),t._v(" text"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("csv text"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("xml text"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("css text"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("plain text"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("javascript application"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("javascript application"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("javascript application"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("json application"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("xml"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("可以看到的是，gzip 默认是关闭的，并且配置时需要设定 http 版本为 1.1，为什么？原因是 http 1.1 支持 TCP 持久连接，而 http 1.0 需要配置"),a("code",[t._v("Connection: keep-alive")]),t._v("才会是持久连接，需知道的是持久连接有助于避免每次请求都需要重新 TCP 建立连接。")]),t._v(" "),a("h2",{attrs:{id:"nginx-负载均衡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-负载均衡"}},[t._v("#")]),t._v(" Nginx-负载均衡")]),t._v(" "),a("p",[a("strong",[t._v("负载均衡原理是利用一定的分配策略将网络负载平衡地分配到网络集群的各个操作单元上，使得单个重负载任务、大量并发请求分担到多个单元上分别处理，从而减少用户的等待时间")]),t._v("。")]),t._v(" "),a("p",[t._v("在 Nginx 中如何实现负载均衡呢？按照 OSI 七层模型，"),a("strong",[t._v("Nginx 服务器实现的负载均衡一般认为是七层负载均衡")]),t._v("。")]),t._v(" "),a("p",[t._v("通过硬件实现的负载均衡效果好、效率高、性能稳定，但是缺陷就是成本够高。而"),a("strong",[t._v("通过软件实现的负载均衡则是依赖于均衡算法的选择和程序的健壮性")]),t._v("。均衡算法主要分为两大类：静态负载均衡算法和动态负载均衡算法。")]),t._v(" "),a("p",[t._v("其中静态负载均衡算法主要有"),a("strong",[t._v("一般轮询算法、基于比率的加权轮询算法、基于优先级的加权轮询算法")]),t._v("，算法较为简单并且在"),a("strong",[t._v("一般网络下")]),t._v("都能得到比较好的效果。")]),t._v(" "),a("p",[t._v("而动态负载均衡有基于任务量的"),a("strong",[t._v("最少连接优先算法")]),t._v("、基于性能的"),a("strong",[t._v("最快响应优先算法")]),t._v("等，在较为"),a("strong",[t._v("复杂的网络环境")]),t._v("中适应性强，效果更好。")]),t._v(" "),a("p",[t._v("Nginx 默认情况下采用一般轮询算法，主要使用的配置是 proxy_pass 和 upstream 指令。示例配置如下")]),t._v(" "),a("div",{staticClass:"language-nginx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-nginx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("upstream")]),t._v(" haha "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("listen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server_name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" www"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("html "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("htm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("location")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("proxy_pass")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("http")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("haha"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("proxy_set_header")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Host Shost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("下面就在 Nginx 基础上，对上述列举的算法进行配置")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("一般轮询算法：将客户端请求"),a("strong",[t._v("按顺序进行轮询分配")]),t._v("到相应的服务器中。")]),t._v(" "),a("div",{staticClass:"language-nginx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-nginx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("upstream")]),t._v(" haha "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("最少连接优先算法：将客户端请求优先分配到压力较小的服务器中，平衡每个队列的长度。")]),t._v(" "),a("div",{staticClass:"language-nginx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-nginx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("upstream")]),t._v(" haha "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  least_conn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("最快响应优先算法：对客户端所有请求中处理时间最短的优先分配。")]),t._v(" "),a("div",{staticClass:"language-nginx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-nginx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("upstream")]),t._v(" haha "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  fair"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("客户端ip绑定：对客户端请求中来自同一个 IP 的请求只分配一台机器，有效解决动态网页存在的 session 共享问题。")]),t._v(" "),a("div",{staticClass:"language-nginx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-nginx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("upstream")]),t._v(" haha "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ip_hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"nginx-缓存机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-缓存机制"}},[t._v("#")]),t._v(" Nginx-缓存机制")]),t._v(" "),a("p",[a("strong",[t._v("Nginx 使用 Proxy Cache 和 Proxy Store 实现代理服务器的缓存机制")]),t._v("。")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("Proxy Store 缓存机制")]),t._v(" "),a("p",[t._v("该指令"),a("strong",[t._v("配置是否在本地磁盘直接对来自代理服务器的响应数据进行缓存")]),t._v("。"),a("strong",[t._v("不提供缓存过期更新、内存索引建立等功能，不占用内存空间，对静态数据效果够好")]),t._v("。")]),t._v(" "),a("p",[t._v("配置如下")]),t._v(" "),a("div",{staticClass:"language-nginx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-nginx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("proxy_store")]),t._v(" on "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" off "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("Proxy Cache 缓存机制")]),t._v(" "),a("p",[a("strong",[t._v("生成专门的进程对磁盘上的缓存文件进行扫描，在内存中建立缓存索引")]),t._v("，提高访问效率，并且还会"),a("strong",[t._v("生成专门的管理进程对磁盘上的缓存文件进行过期判定、更新等方面的管理")]),t._v("。")]),t._v(" "),a("p",[t._v("Proxy Cache 缓存机制不管在性能上还是在数据管理上要远远优于 Proxy Store 缓存机制。一般配置如下。")]),t._v(" "),a("div",{staticClass:"language-nginx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-nginx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("http")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("proxy_cache_path")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("proxyCache levels"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" max_size"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("m inactive"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("m loader_sleep"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" keys_zone"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("MYPROXYCACHE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("m "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置缓存数据存放路径和Proxy Cache使用的内存Cache空间")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("proxy_temp_path")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("temp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置响应数据的临时存放目录")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("location")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("proxy_pass")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("http")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("www"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Nginx缓存里拿不到资源，向该地址转发请求，拿到新的资源，并进行缓存")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("proxy_cache")]),t._v(" MYPROXYCACHE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 指定用于页面缓存的共享内存，对应http层设置的keys_zone")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("proxy_cache_valid")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("302")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("h"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置200状态和302状态的响应缓存1小时")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),a("p",[t._v("另外，附上一个静态资源服务器的配置示范。")]),t._v(" "),a("div",{staticClass:"language-nginx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-nginx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("location")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" \\"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("png"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("gif"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("jpg"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("jpeg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("root")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("root")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("static"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 指定路径即为Nginx本地路径")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("autoindex")]),t._v(" on"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("access_log")]),t._v("  off"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("expires")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("h"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置过期时间为10小时          ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);