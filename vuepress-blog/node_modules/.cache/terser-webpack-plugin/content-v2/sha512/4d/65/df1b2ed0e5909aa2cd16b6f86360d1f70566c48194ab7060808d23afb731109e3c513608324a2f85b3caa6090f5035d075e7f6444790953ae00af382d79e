{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{298:function(t,s,a){\"use strict\";a.r(s);var e=a(0),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"h1\",{attrs:{id:\"你搞懂正则了吗\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#你搞懂正则了吗\"}},[t._v(\"#\")]),t._v(\" 你搞懂正则了吗\")]),t._v(\" \"),a(\"p\",[t._v(\"在我开发多年里，正则一直是我最最难以理解的一样东西。说实在的，每次做一些简单的登录注册时，看到需要做对用户输入的字符进行做校验，这时候我就会很习惯地上网去搜相关正则。毕竟除了日常的表单验证需要常用到正则外，我就觉得没什么其他地方能够使用上正则了。\")]),t._v(\" \"),a(\"p\",[t._v(\"当然的，到了后来，我就发现我的这个观点是错误的...😅 在常见的搜索功能又或者前后端数据交互过程等都是可以利用正则很简单实现。所以今天我终于有时间总结一下自己是如何学习正则了。还是那句话，多动手，多分享。😄\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"一个字符的匹配\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一个字符的匹配\"}},[t._v(\"#\")]),t._v(\" 一个字符的匹配\")]),t._v(\" \"),a(\"p\",[t._v(\"正则对我们而言，最简单的方式就是使用写死方式。好比如下面这个🌰：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-js extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" reg \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token regex\"}},[t._v(\"/HelloWord/\")]),t._v(\"\\nconsole\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"reg\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"test\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'helloword'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// false\")]),t._v(\"\\nconsole\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"reg\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"test\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'HelloWord'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// true\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"很简单，就是逐个字符逐个字符地写死在正则里面，就可以很完善满足我们的要求。当然弊端也很明显，那就是每次都得知道匹配的值是什么，然后再一次性地匹配，说白了，就是无法做到动态匹配。\")]),t._v(\" \"),a(\"p\",[t._v(\"那么\"),a(\"strong\",[t._v(\"在正则里面，为了能够实现动态匹配一个字符，衍生出一些匹配标准\")]),t._v(\"，具体如下：\")]),t._v(\" \"),a(\"table\",[a(\"thead\",[a(\"tr\",[a(\"th\",[t._v(\"正则表达式\")]),t._v(\" \"),a(\"th\",[t._v(\"含义\")])])]),t._v(\" \"),a(\"tbody\",[a(\"tr\",[a(\"td\",[t._v(\".\")]),t._v(\" \"),a(\"td\",[t._v(\"匹配任意字符，除了换行符\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"\\\\w\")]),t._v(\" \"),a(\"td\",[t._v(\"匹配 a - z，A - Z，0 - 9，_字符\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"\\\\W\")]),t._v(\" \"),a(\"td\",[t._v(\"匹配除了a - z，A - Z，0 - 9，_外的字符\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"\\\\d\")]),t._v(\" \"),a(\"td\",[t._v(\"匹配 0 - 9 字符\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"\\\\D\")]),t._v(\" \"),a(\"td\",[t._v(\"匹配除了 0 - 9 外的字符\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"\\\\s\")]),t._v(\" \"),a(\"td\",[t._v(\"匹配空白字符\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"\\\\S\")]),t._v(\" \"),a(\"td\",[t._v(\"匹配除了空白字符外的字符\")])])])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"上述表格中的正则匹配，都是为了匹配一个字符用到的\")]),t._v(\"。（这里一定要记住，是匹配一个字符用的！）但是，它们都是为了匹配一个正常字符用的。\")]),t._v(\" \"),a(\"p\",[t._v(\"那么问题来了，\"),a(\"strong\",[t._v(\"如果我想只匹配 1，2 两个数字中的任意一个，如何写？其实在正则里允许我们在\"),a(\"code\",[t._v(\"[]\")]),t._v(\"符号里编写一些可能出现的字符集合，用于匹配一个字符使用\")]),t._v(\"。所以使用上可以这样，\"),a(\"strong\",[a(\"code\",[t._v(\"[1-2a-c]\")]),t._v(\"用来匹配一个字符是1或者2，又或者是a到c之间某个字符\")]),t._v(\"。\")]),t._v(\" \"),a(\"p\",[t._v(\"那么\"),a(\"strong\",[t._v(\"如果一个字符是特殊字符时，又该如何处理\")]),t._v(\"呢？答案就是转义字符。那究竟如何转义呢？\")]),t._v(\" \"),a(\"p\",[t._v(\"例如，我们\"),a(\"strong\",[t._v(\"想匹配一个 & 字符，那就得使用\"),a(\"code\",[t._v(\"\\\\&\")]),t._v(\"正则来匹配\")]),t._v(\"。说白了，就是\"),a(\"strong\",[t._v(\"符号\"),a(\"code\",[t._v(\"\\\\\")]),t._v(\"加上相应的特殊字符就能匹配一个特殊字符了\")]),t._v(\"。\")]),t._v(\" \"),a(\"p\",[t._v(\"当然，开发中会有一些换行符、换页符等特殊字符，正则对于这批特殊字符也给出一个标准，如下。\")]),t._v(\" \"),a(\"table\",[a(\"thead\",[a(\"tr\",[a(\"th\",[t._v(\"正则表达式\")]),t._v(\" \"),a(\"th\",[t._v(\"含义\")])])]),t._v(\" \"),a(\"tbody\",[a(\"tr\",[a(\"td\",[t._v(\"\\\\n\")]),t._v(\" \"),a(\"td\",[t._v(\"换行符\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"\\\\f\")]),t._v(\" \"),a(\"td\",[t._v(\"换页符（也叫 form feed）\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"\\\\t\")]),t._v(\" \"),a(\"td\",[t._v(\"制表符（也叫 table）\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"\\\\r\")]),t._v(\" \"),a(\"td\",[t._v(\"回车符（也叫 return）\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"\\\\s\")]),t._v(\" \"),a(\"td\",[t._v(\"空白符（也叫 space）\")])])])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"除了上述表格中列出的匹配特殊字符外，其他一律采用符号\"),a(\"code\",[t._v(\"\\\\\")]),t._v(\"加上相应的特殊字符来匹配一个特殊字符\")]),t._v(\"。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"一个字符出现次数的范围匹配\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一个字符出现次数的范围匹配\"}},[t._v(\"#\")]),t._v(\" 一个字符出现次数的范围匹配\")]),t._v(\" \"),a(\"p\",[t._v(\"既然知道如何对一个字符进行相应的匹配后，接着要是想重复一个字符又是如何操作？又或者说，无法知道该字符出现的次数时又该如何匹配？\")]),t._v(\" \"),a(\"p\",[t._v(\"针对这个问题，正则的标准也给出了一个相应的规定，如下：\")]),t._v(\" \"),a(\"table\",[a(\"thead\",[a(\"tr\",[a(\"th\",[t._v(\"正则表达式\")]),t._v(\" \"),a(\"th\",[t._v(\"含义\")])])]),t._v(\" \"),a(\"tbody\",[a(\"tr\",[a(\"td\",[t._v(\"?\")]),t._v(\" \"),a(\"td\",[t._v(\"出现0次或者1次\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"*\")]),t._v(\" \"),a(\"td\",[t._v(\"出现>=0次\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"+\")]),t._v(\" \"),a(\"td\",[t._v(\"出现>=1次\")])])])]),t._v(\" \"),a(\"p\",[t._v(\"需要注意的是，\"),a(\"strong\",[t._v(\"上面的三个正则表达式，都是为了它前面的一个字符服务的\")]),t._v(\"！那么我们先看一个🌰：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-js extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" reg \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token regex\"}},[t._v(\"/Hel+oWord/\")]),t._v(\"\\nconsole\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"reg\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"test\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'HelloWord'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// true\")]),t._v(\"\\nconsole\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"reg\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"test\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'HelllllloWord'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// true\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"当然上面的三个正则表达式肯定是无法满足我们实际情况的，好比如我确定一个字符是会出现至少 3 次时，那该如何处理？\")]),t._v(\" \"),a(\"p\",[t._v(\"答案就是\"),a(\"strong\",[t._v(\"使用\"),a(\"code\",[t._v(\"{}\")]),t._v(\"包裹相应的次数，就是表示一个字符出现次数的范围匹配\")]),t._v(\"。\")]),t._v(\" \"),a(\"table\",[a(\"thead\",[a(\"tr\",[a(\"th\",[t._v(\"正则表达式\")]),t._v(\" \"),a(\"th\",[t._v(\"含义\")])])]),t._v(\" \"),a(\"tbody\",[a(\"tr\",[a(\"td\",[t._v(\"{2,}\")]),t._v(\" \"),a(\"td\",[t._v(\"出现至少2次\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"{,8}\")]),t._v(\" \"),a(\"td\",[t._v(\"出现至多8次\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"{2, 8}\")]),t._v(\" \"),a(\"td\",[t._v(\"出现次数在 2 - 8 之间\")])])])]),t._v(\" \"),a(\"p\",[t._v(\"理解上不难，无非就是使用一个\"),a(\"code\",[t._v(\"{}\")]),t._v(\"符号包裹出现的次数即可。\")]),t._v(\" \"),a(\"p\",[t._v(\"不过需要注意的是，\"),a(\"strong\",[t._v(\"如果上面几个表达式前面的字符串使用\"),a(\"code\",[t._v(\"()\")]),t._v(\"包裹的话，那就是表示该字符串出现的次数范围匹配！\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"边界匹配\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#边界匹配\"}},[t._v(\"#\")]),t._v(\" 边界匹配\")]),t._v(\" \"),a(\"p\",[t._v(\"什么是边界？简单来说，就是用于形容一个字符或者字符串出现的位置。\")]),t._v(\" \"),a(\"p\",[t._v(\"好比如，现在有这样的一个字符串\"),a(\"code\",[t._v(\"The housewife is always in the house.\")]),t._v(\"，我们需要匹配到\"),a(\"code\",[t._v(\"house\")]),t._v(\"这个字符。然后我们就会想当然滴想使用\"),a(\"code\",[t._v(\"/house/\")]),t._v(\"来匹配，但是它会匹配到两个，分别是\"),a(\"code\",[t._v(\"housewife\")]),t._v(\"和\"),a(\"code\",[t._v(\"house\")]),t._v(\"。\")]),t._v(\" \"),a(\"p\",[t._v(\"好了，在解决上述问题时，我们先看看正则对于边界是如何给出标准的。\")]),t._v(\" \"),a(\"table\",[a(\"thead\",[a(\"tr\",[a(\"th\",[t._v(\"正则表达式\")]),t._v(\" \"),a(\"th\",[t._v(\"含义\")])])]),t._v(\" \"),a(\"tbody\",[a(\"tr\",[a(\"td\",[t._v(\"\\\\b\")]),t._v(\" \"),a(\"td\",[t._v(\"表示单词边界\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"\\\\B\")]),t._v(\" \"),a(\"td\",[t._v(\"表示非单词边界\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"^\")]),t._v(\" \"),a(\"td\",[t._v(\"表示整个字符串的开头\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"$\")]),t._v(\" \"),a(\"td\",[t._v(\"表示整个字符串的结尾\")])])])]),t._v(\" \"),a(\"p\",[t._v(\"因为我们要是想匹配到\"),a(\"code\",[t._v(\"house\")]),t._v(\"和\"),a(\"code\",[t._v(\"housewife\")]),t._v(\"，我们可以如何操作。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-js extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" str1 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'house'\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" str2 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'housewife'\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" reg1 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token regex\"}},[t._v(\"/\\\\bhouse\\\\b/\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" reg2 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token regex\"}},[t._v(\"/\\\\bhouse\\\\B/\")]),t._v(\"\\nconsole\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"reg1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"test\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"str\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// true\")]),t._v(\"\\nconsole\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"reg2\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"test\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"str\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// true\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"相信你们对于\"),a(\"code\",[t._v(\"^\")]),t._v(\"和\"),a(\"code\",[t._v(\"$\")]),t._v(\"都不陌生，毕竟在正则中也是很常见的一个符号，就是分别匹配字符串开头和结尾位置。还是先看一个🌰：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-js extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" str \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'haha he asdad '\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" reg1 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token regex\"}},[t._v(\"/^he$/\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" reg2 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token regex\"}},[t._v(\"/^.+he.+$/\")]),t._v(\"\\nconsole\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"reg1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"test\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"str\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// false\")]),t._v(\"\\nconsole\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"reg2\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"test\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"str\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// true\")]),t._v(\"\\n\")])])]),a(\"h2\",{attrs:{id:\"修饰符匹配\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#修饰符匹配\"}},[t._v(\"#\")]),t._v(\" 修饰符匹配\")]),t._v(\" \"),a(\"p\",[t._v(\"在正则里，主要定义了三种修饰符匹配，主要如下：\")]),t._v(\" \"),a(\"table\",[a(\"thead\",[a(\"tr\",[a(\"th\",[t._v(\"修饰符\")]),t._v(\" \"),a(\"th\",[t._v(\"含义\")])])]),t._v(\" \"),a(\"tbody\",[a(\"tr\",[a(\"td\",[t._v(\"m\")]),t._v(\" \"),a(\"td\",[t._v(\"匹配多行模式\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"i\")]),t._v(\" \"),a(\"td\",[t._v(\"匹配忽略大小写\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",[t._v(\"g\")]),t._v(\" \"),a(\"td\",[t._v(\"匹配全局模式\")])])])]),t._v(\" \"),a(\"p\",[t._v(\"修饰符在使用上很简单，只需要在正则最后面贴上即可。可以看个栗子。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-js extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" str \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'aabbcc'\")]),t._v(\"\\nconsole\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"str\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"replace\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token regex\"}},[t._v(\"/b/g\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'h'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// aahhcc\")]),t._v(\"\\n\")])])]),a(\"h2\",{attrs:{id:\"分组匹配\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#分组匹配\"}},[t._v(\"#\")]),t._v(\" 分组匹配\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"分组匹配模式使用的是\"),a(\"code\",[t._v(\"()\")]),t._v(\"符号\")]),t._v(\"，如果单纯滴使用该括号的话，其实和上面的字符匹配是没有任何区别。那么怎么才能体现它的高级高能呢？\")]),t._v(\" \"),a(\"p\",[t._v(\"简单来说，要是想体现它的有效性，那么就要将一个长的字符串分段处理，而这里面就不得不使用分组匹配。\")]),t._v(\" \"),a(\"p\",[t._v(\"举个🌰，现在需要匹配一个 IP 地址，由于一个 IP 地址可分为四部分组成，第一部分肯定是 1 - 255 之间，第二、三、四部分都是 0 - 255 之间，那么这时候就得使用分组完成了，如下。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-js extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" reg \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token regex\"}},[t._v(\"/^(1\\\\d{0,2}|2[0-5]{0,2})\\\\,(0|1\\\\d{0,2}|2[0-5]{0,2})\\\\,\\\\2\\\\,\\\\2/\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"通过上述的分组后，就可以很容易清楚每一组的正则到底如何编写。\")]),t._v(\" \"),a(\"p\",[t._v(\"等等，还是有问题，\"),a(\"code\",[t._v(\"\\\\2\")]),t._v(\"到底是什么鬼？别急，下面会继续讲到哈。🤔\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"回溯引用匹配\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#回溯引用匹配\"}},[t._v(\"#\")]),t._v(\" 回溯引用匹配\")]),t._v(\" \"),a(\"p\",[t._v(\"所谓的回溯引用，指的的就是在模式后面想继续引用前面已经匹配到的字符串。那么回溯引用就必须结合相应的分组匹配了。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"在正则里面，我们可以使用\"),a(\"code\",[t._v(\"\\\\\")]),t._v(\"加上数字来表示选择第几个表达式\")]),t._v(\"。当然，\"),a(\"strong\",[a(\"code\",[t._v(\"\\\\1\")]),t._v(\"表示的就是第一个\"),a(\"code\",[t._v(\"()\")]),t._v(\"包裹的表达式了\")]),t._v(\"。所以上面的\"),a(\"code\",[t._v(\"\\\\2\")]),t._v(\"就是直接引用了第二个表达式\"),a(\"code\",[t._v(\"(0|1\\\\d{0,2}|2[0-5]{0,2})\")]),t._v(\"。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"回溯引用在替换方法\"),a(\"code\",[t._v(\"replace\")]),t._v(\"中十分常用，但是和正则上引用的语法会有些不太一样，它使用的是\"),a(\"code\",[t._v(\"$\")]),t._v(\"加数字表示\")]),t._v(\"。先看个🌰。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-js extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" str \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'aabbcc'\")]),t._v(\"\\nconsole\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"str\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"replace\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token regex\"}},[t._v(\"/(a)b(b)/\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'$2b$1'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// abbacc\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"另外的话，\"),a(\"strong\",[t._v(\"回溯引用也支持使用\"),a(\"code\",[t._v(\"(?:regex)\")]),t._v(\"表示无法被表达式引用\")]),t._v(\"，看个🌰。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-js extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" str \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'aabbcc'\")]),t._v(\"\\nconsole\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"str\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"replace\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token regex\"}},[t._v(\"/(a)b(?:b)/\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'$2b$1'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// a$2bacc\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"那么，对于回溯引用，还有两个很重要的功能点没有提及，那就是\"),a(\"strong\",[t._v(\"向前查找和向后查找\")]),t._v(\"。\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"向前查找使用的是\"),a(\"code\",[t._v(\"(?=regex)\")]),t._v(\"，而向后查找则是使用\"),a(\"code\",[t._v(\"(?<=regex)\")])]),t._v(\"。那么还是回到上面那个\"),a(\"code\",[t._v(\"house\")]),t._v(\"和\"),a(\"code\",[t._v(\"housewife\")]),t._v(\"的问题，现在我们有一个字符串\"),a(\"code\",[t._v(\"house housewife\")]),t._v(\"，那么我就是将\"),a(\"code\",[t._v(\"housewife\")]),t._v(\"前面的\"),a(\"code\",[t._v(\"house\")]),t._v(\"替换成\"),a(\"code\",[t._v(\"yes\")]),t._v(\"，可使用向前查找。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-js extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" str \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'house housewife'\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" reg \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token regex\"}},[t._v(\"/house(?=wife)/\")]),t._v(\"\\nconsole\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"str\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"replace\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"reg\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'yes'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// house yeswife\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"向前查找和向后查找都可以很有效滴针对两个具有相同的匹配地方分离出来。\")]),t._v(\" \"),a(\"p\",[t._v(\"另外的话，\"),a(\"strong\",[t._v(\"向前查找也有负向前查找，使用的是\"),a(\"code\",[t._v(\"(?!regex)\")]),t._v(\"，向后查找也有负向后查找，使用的是\"),a(\"code\",[t._v(\"(?<!regex)\")])]),t._v(\"。原理上是一样，好比如我仅仅是想把\"),a(\"code\",[t._v(\"house\")]),t._v(\"转化为\"),a(\"code\",[t._v(\"yes\")]),t._v(\"，而\"),a(\"code\",[t._v(\"housewife\")]),t._v(\"原封不动。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-js extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" str \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'house housewife'\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" reg \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token regex\"}},[t._v(\"/house(?!wife)/\")]),t._v(\"\\nconsole\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"str\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"replace\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"reg\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'yes'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// yes housewife\")]),t._v(\"\\n\")])])]),a(\"h2\",{attrs:{id:\"总结\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#总结\"}},[t._v(\"#\")]),t._v(\" 总结\")]),t._v(\" \"),a(\"p\",[t._v(\"正则表达式在理解后，其实并不难，主要就是需要多动手多实践，便会很快知道其中的原理。目前看来，要重点关注的就是重复匹配、分组匹配、边界匹配、回溯引用。只要多运用这些东西，我相信各位还是能很好滴学会使用正则的，希望这篇文章能够给予大家帮助哈。😄\")])])}),[],!1,null,null,null);s.default=n.exports}}]);","extractedComments":[]}